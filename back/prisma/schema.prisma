// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  posts     Post[]   @relation("AuthorPosts")
  comments  Comment[]
  votes     Vote[]
  createdAt DateTime @default(now())
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  image      Bytes?   // Optional post image as a binary type
  author     User     @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId   Int
  comments   Comment[]
  votes      Vote[]
  createdAt  DateTime @default(now())
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  createdAt  DateTime @default(now())
}

model Vote {
  id         Int      @id @default(autoincrement())
  vote       Boolean  // true for upvote, false for downvote
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
  @@unique([postId, userId])
}